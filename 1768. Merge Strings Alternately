//1768. Merge Strings Alternately
//Link:https://leetcode.com/problems/merge-strings-alternately/description/?envType=study-plan-v2&envId=leetcode-75

//Method 1: Efficient Iterative Solution (Using StringBuilder)


class Solution {
    public String mergeAlternately(String word1, String word2) {
        StringBuilder merged = new StringBuilder();
        int i = 0, j = 0;
        
        // Merge characters alternately
        while (i < word1.length() && j < word2.length()) {
            merged.append(word1.charAt(i));
            merged.append(word2.charAt(j));
            i++;
            j++;
        }
        
        // Append remaining characters from word1
        while (i < word1.length()) {
            merged.append(word1.charAt(i));
            i++;
        }
        
        // Append remaining characters from word2
        while (j < word2.length()) {
            merged.append(word2.charAt(j));
            j++;
        }
        
        return merged.toString();
    }
}

Time Complexity:
Space Complexity:


//Method 2:Alternative Approach: Using Recursion



class Solution {
    public String mergeAlternately(String word1, String word2) {
        return mergeHelper(word1, word2, 0, 0);
    }

    private String mergeHelper(String word1, String word2, int i, int j) {
        if (i == word1.length()) return word2.substring(j);  
        if (j == word2.length()) return word1.substring(i);  
        
        return word1.charAt(i) + "" + word2.charAt(j) + mergeHelper(word1, word2, i + 1, j + 1);
    }
}


Time Complexity: 
Space Complexity: 
1768. Merge Strings Alternately

Problem Link: https://leetcode.com/problems/merge-strings-alternately/description/?envType=study-plan-v2&envId=leetcode-75

Sheet Link: https://docs.google.com/spreadsheets/d/1MAaYH3Qam_Prr75MGlfALNd7hS-6gHMm1ot2eAQg1P8/edit?usp=sharing

Solution:

Method 1: 

class Solution{
    public String mergeAlternately(String word1,String word2)
    {
        StringBuilder sb = new StringBuilder();
        int n1 = word1.length();
        int n2 = word2.length();
        int i=0;

        while(i<n1 || i<n2)
        {
            if(i<n1)
                sb.append(word1.charAt(i));
            if(i<n2)
                sb.append(word2.charAt(i));
            i++;
        }
        return sb.toString();
    }
}

Time Complexity: O(n + m)
Space Complexity: O(n + m)


Method 2:

class Solution {
    public String mergeAlternately(String word1, String word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        int min = Math.min(len1, len2);
        String longerString = "";

        if (min == len1) {
            longerString = word2;
        }
        if (min == len2) {
            longerString = word1;
        }

        char chars1[] = word1.toCharArray();
        char chars2[] = word2.toCharArray();
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < min; i++) {
            sb.append(chars1[i]);
            sb.append(chars2[i]);
        }

        sb.append(longerString.substring(min));
        return sb.toString();
    }
}

Time Complexity: O(n + m)
Space Complexity: O(n + m)


Method 3:

class Solution{
    public String mergeAlternately(String word1, String word2)
    {
        StringBuilder sb= new StringBuilder();
        int i=0;
        int j=0;
        boolean flag = true;
        while(i<word1.length() && j<word2.length())
        {
            if(flag)
            {
                sb.append(word1.charAt(i));
                i++;
            }
            else
            {
                sb.append(word2.charAt(j));
                j++;
            }
            flag =!flag;
        }
        while(i<word1.length())
        {
            sb.append(word1.charAt(i));
            i++;
        }
        while(j<word2.length())
        {
            sb.append(word2.charAt(j));
            j++;
        }
        return sb.toString();
    }
}

Time Complexity: O(n + m)
Space Complexity: O(n + m)


Method 4: Using Ternary Operator

class Solution {
    public String mergeAlternately(String word1, String word2) {
        StringBuilder sb = new StringBuilder();
        int n1 = word1.length();
        int n2 = word2.length();
        int maxLen = Math.max(n1, n2);
        
        for (int i = 0; i < maxLen; i++) {
            sb.append(i < n1 ? word1.charAt(i) : ""); // take from word1 if available
            sb.append(i < n2 ? word2.charAt(i) : ""); // take from word2 if available
        }
        
        return sb.toString();
    }
}


Time Complexity: O(n + m)
Space Complexity: O(n + m)


Method 5: Using Recursion

class Solution {
    public String mergeAlternately(String word1, String word2) {
        StringBuilder sb = new StringBuilder();
        int n1 = word1.length();
        int n2 = word2.length();
        int maxLen = Math.max(n1, n2);
        
        for (int i = 0; i < maxLen; i++) {
            sb.append(i < n1 ? word1.charAt(i) : ""); // take from word1 if available
            sb.append(i < n2 ? word2.charAt(i) : ""); // take from word2 if available
        }
        
        return sb.toString();
    }
}


Time Complexity: O(n + m)
Space Complexity: O(n + m)